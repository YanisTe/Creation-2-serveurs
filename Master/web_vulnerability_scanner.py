import requests
import re
from bs4 import BeautifulSoup
import tkinter as tk
from tkinter import ttk
from urllib.parse import urljoin
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import os

def scan_website(url):
    discovered_urls = discover_urls(url)
    vulnerabilities_found = []

    for page_url in discovered_urls:
        vulnerabilities = scan_url(page_url)
        if vulnerabilities:
            vulnerabilities_found.append((page_url, vulnerabilities))

    return vulnerabilities_found

def discover_urls(url):
    discovered_urls = []
    response = requests.get(url, allow_redirects=False)
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, "html.parser")
        for anchor_tag in soup.find_all("a"):
            href = anchor_tag.get("href")
            if href and href.startswith(('http', 'https')):
                absolute_url = urljoin(url, href)
                discovered_urls.append(absolute_url)
    return discovered_urls

def scan_url(url):
    vulnerabilities = {}
    if is_sql_injection_vulnerable(url):
        vulnerabilities["SQL injection vulnerability"] = "Injecting SQL code into input fields"
    if is_xss_vulnerable(url):
        vulnerabilities["Cross-site scripting (XSS) vulnerability"] = "Injecting malicious scripts into input fields"
    return vulnerabilities

def is_sql_injection_vulnerable(url):
    payload = "' OR '1'='1"
    try:
        response = requests.get(url + "?id=" + payload, allow_redirects=False)
        if re.search(r"error|warning", response.text, re.IGNORECASE):
            return True
    except requests.exceptions.RequestException as e:
        print(f"Request exception: {e}")
    return False

def is_xss_vulnerable(url):
    payload = "<script>alert('XSS')</script>"
    try:
        response = requests.get(url + "?input=" + payload, allow_redirects=False)
        if payload in response.text:
            return True
    except requests.exceptions.RequestException as e:
        print(f"Request exception: {e}")
    return False

def generate_pdf_report(url, vulnerabilities_found, directory="/home/kali/Documents/ToolsBox/compte_rendu/vulnerabilité_web"):
    if not os.path.exists(directory):
        os.makedirs(directory)

    filename = os.path.join(directory, f"{url.replace('http://', '').replace('https://', '').replace('/', '_')}_vulnerability_report.pdf")
    c = canvas.Canvas(filename, pagesize=letter)
    text = c.beginText(40, 750)
    text.setFont("Helvetica", 12)
    text.textLine(f"Vulnerability Report for {url}")
    text.textLine("------------------------------")

    if vulnerabilities_found:
        for page_url, vulnerabilities in vulnerabilities_found:
            text.textLine(f"\nURL: {page_url}")
            for vulnerability, attack_method in vulnerabilities.items():
                text.textLine(f"  - {vulnerability}: {attack_method}")
    else:
        text.textLine("No vulnerabilities found.")

    c.drawText(text)
    c.save()

def start_scan():
    url = url_entry.get()
    scan_results.delete("1.0", tk.END)
    vulnerabilities_found = scan_website(url)
    if vulnerabilities_found:
        scan_results.insert(tk.END, "Vulnerabilities found:\n")
        for page_url, vulnerabilities in vulnerabilities_found:
            scan_results.insert(tk.END, f"\nURL: {page_url}\n")
            for vulnerability, attack_method in vulnerabilities.items():
                scan_results.insert(tk.END, f"Vulnerability: {vulnerability}\n")
                scan_results.insert(tk.END, f"Attack Method: {attack_method}\n")
    else:
        scan_results.insert(tk.END, "No vulnerabilities found.")

    # Générer le rapport PDF
    generate_pdf_report(url, vulnerabilities_found)
    scan_results.insert(tk.END, "\nPDF report generated successfully.")

root = tk.Tk()
root.title("Website Vulnerability Scanner")
main_frame = ttk.Frame(root, padding="10")
main_frame.grid(column=0, row=0)
url_label = ttk.Label(main_frame, text="Enter URL:")
url_label.grid(column=1, row=1, sticky=tk.W)
url_entry = ttk.Entry(main_frame, width=40)
url_entry.grid(column=2, row=1, sticky=tk.E)
scan_button = ttk.Button(main_frame, text="Start Scan", command=start_scan)
scan_button.grid(column=3, row=1)
scan_results = tk.Text(main_frame, height=20, width=80, font=("Courier", 12))
scan_results.grid(column=1, row=2, columnspan=3)
root.mainloop()
